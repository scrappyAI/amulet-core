use crate::types::{AlgSuite, CID, ReplicaID, VectorClock};

/// Represents an event, the result of a successfully processed Command.
///
/// Events are append-only records that signify a state change or an important occurrence
/// within the Amulet kernel. They are generated by the kernel after a command is validated
/// and its effects are applied.
/// Events serve as the authoritative log of all significant operations.
#[derive(Debug, Clone, PartialEq, Eq)] // Eq might be too strong if HashMap in VectorClock makes it non-Eq without careful handling
pub struct Event {
    /// Unique Content ID of this event.
    pub id: CID,
    /// The cryptographic algorithm suite associated with this event, typically inherited
    /// from the command that caused it or determined by the kernel.
    pub alg_suite: AlgSuite,
    /// Identifier of the replica that generated this event.
    pub replica: ReplicaID,
    /// Content ID of the `Command` that caused this event to be generated.
    pub caused_by: CID, // Command.id
    /// Lamport logical clock timestamp assigned to this event by the kernel.
    /// This timestamp reflects the logical time at which the event was committed.
    pub lclock: u64,
    /// A list of Content IDs for new entities created as a result of this event.
    pub new_entities: Vec<CID>,
    /// A list of Content IDs for entities updated as a result of this event.
    pub updated_entities: Vec<CID>,
    /// Optional vector clock associated with this event, if the vector clock extension is enabled.
    /// Provides a more detailed causal history across replicas.
    pub vector_clock: VectorClock, // Option<HashMap<ReplicaID, u64>>
    // Note on "Unknown future fields MUST be preserved bit-exact when relayed.":
    // This is a requirement for serialization/deserialization logic, not directly
    // represented in the Rust struct fields here. The chosen serialization format
    // and its implementation must support this.
}

// Key characteristics of Events (from kernel_spec.MD):
//
// 1.  **Append-Only:**
//     Events are written to a log and are never modified or deleted once recorded.
//     This ensures an immutable history of operations.
//
// 2.  **Kernel-Assigned `lclock`:**
//     The `lclock` for an event is determined by the kernel during the `apply(cmd)` process,
//     specifically `max(cmd.lclock, local_lc + 1)`.
//
// 3.  **Preservation of Unknown Fields:**
//     When events are relayed or re-serialized (e.g., passed between replicas or stored and retrieved),
//     any fields not known to the current software version MUST be preserved exactly as they were.
//     This ensures forward compatibility and prevents data loss as the protocol evolves. 